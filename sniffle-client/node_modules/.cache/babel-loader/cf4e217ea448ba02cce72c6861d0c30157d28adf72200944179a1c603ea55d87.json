{"ast":null,"code":"import axios from \"axios\";\nimport { successMsg } from \"./feedbacksServices\";\nlet api = `${process.env.REACT_APP_API}/favorites`;\nexport function getFav(userId) {\n  return axios.get(`${api}?userId=${userId}`);\n}\n\n// add to fav / update fav\n// export async function addToFav(userId: string, cardId: string) {\n//   try {\n//     let res = await getFav(userId);\n//     if (res.data.length === 0) {\n//       await createFav(userId);\n//       res = await getFav(userId);\n//     }\n\n//     const cardInFav = res.data[0].favCards.some((card: Card) => card._id === cardId);\n//     if (!cardInFav) {\n//       res.data[0].favCards.push(cardId);\n\n//       successMsg(\"Card added to favorites.\");\n//       return await axios.patch(`${api}/${res.data[0]._id}`, {\n//         favCards: res.data[0].favCards,\n//       });\n//     } else {\n//       successMsg(\"Card is already in favorites.\");\n//     }\n//   } catch (error) {\n//     console.log(error);\n//   }\n// }\nexport async function addToFav(userId, cardToAdd) {\n  try {\n    let res = await getFav(userId);\n    const cardInFav = res.data[0].favCards.some(card => card._id === cardToAdd._id);\n    if (!cardInFav) {\n      res.data[0].favCards.push({\n        ...cardToAdd\n      });\n      successMsg(\"Card added to favorites.\");\n      return await axios.patch(`${api}/${res.data[0]._id}`, {\n        favCards: res.data[0].favCards\n      });\n    } else {\n      successMsg(\"Card is already in favorites.\");\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport async function addToCart(productToAdd) {\n  try {\n    let product = _.pick(productToAdd, [\"_id\", \"name\", \"category\", \"description\", \"price\", \"image\"]);\n    return axios.post(api, product, {\n      headers: {\n        Authorization: JSON.parse(sessionStorage.getItem(\"token\")).token\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n// export function createFav(_id: string) {\n//   return axios.post(api, { _id: _id, favCards: [] });\n// }\n\nexport function checkFavCard(favToCheck, _id) {\n  return axios.get(`${api}/${_id}`);\n}\nexport async function removeFromFav(userId, cardId) {\n  try {\n    let res = await getFav(userId);\n    res.data[0].favCards = res.data[0].favCards.filter(favCard => favCard._id !== cardId);\n    return axios.patch(`${api}/${res.data[0]._id}`, {\n      favCards: res.data[0].favCards\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}","map":{"version":3,"names":["axios","successMsg","api","process","env","REACT_APP_API","getFav","userId","get","addToFav","cardToAdd","res","cardInFav","data","favCards","some","card","_id","push","patch","error","console","log","addToCart","productToAdd","product","_","pick","post","headers","Authorization","JSON","parse","sessionStorage","getItem","token","checkFavCard","favToCheck","removeFromFav","cardId","filter","favCard"],"sources":["/Users/lironds/Documents/FullStack/HackerU/react/sniffle-client/src/services/favServices.ts"],"sourcesContent":["import axios from \"axios\";\nimport Card from \"../interfaces/Card\";\nimport Favorite from \"../interfaces/Favorite\";\nimport { successMsg } from \"./feedbacksServices\";\n\nlet api: string = `${process.env.REACT_APP_API}/favorites`;\n\nexport function getFav(userId: string) {\n  return axios.get(`${api}?userId=${userId}`);\n}\n\n// add to fav / update fav\n// export async function addToFav(userId: string, cardId: string) {\n//   try {\n//     let res = await getFav(userId);\n//     if (res.data.length === 0) {\n//       await createFav(userId);\n//       res = await getFav(userId);\n//     }\n\n//     const cardInFav = res.data[0].favCards.some((card: Card) => card._id === cardId);\n//     if (!cardInFav) {\n//       res.data[0].favCards.push(cardId);\n\n//       successMsg(\"Card added to favorites.\");\n//       return await axios.patch(`${api}/${res.data[0]._id}`, {\n//         favCards: res.data[0].favCards,\n//       });\n//     } else {\n//       successMsg(\"Card is already in favorites.\");\n//     }\n//   } catch (error) {\n//     console.log(error);\n//   }\n// }\nexport async function addToFav(userId: string, cardToAdd: Card) {\n  try {\n    let res = await getFav(userId);\n\n    const cardInFav = res.data[0].favCards.some((card: Card) => card._id === cardToAdd._id);\n    if (!cardInFav) {\n      res.data[0].favCards.push({ ...cardToAdd });\n      successMsg(\"Card added to favorites.\");\n      return await axios.patch(`${api}/${res.data[0]._id}`, {\n        favCards: res.data[0].favCards,\n      });\n    } else {\n      successMsg(\"Card is already in favorites.\");\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function addToCart(productToAdd: Product) {\n  try {\n    let product = _.pick(productToAdd, [\n      \"_id\",\n      \"name\",\n      \"category\",\n      \"description\",\n      \"price\",\n      \"image\",\n    ]);\n    return axios.post(api, product, {\n      headers: {\n        Authorization: JSON.parse(sessionStorage.getItem(\"token\") as string).token,\n      },\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n// export function createFav(_id: string) {\n//   return axios.post(api, { _id: _id, favCards: [] });\n// }\n\nexport function checkFavCard(favToCheck: Card, _id: string) {\n  return axios.get(`${api}/${_id}`);\n}\n\nexport async function removeFromFav(userId: string, cardId: string) {\n  try {\n    let res = await getFav(userId);\n    res.data[0].favCards = res.data[0].favCards.filter((favCard: Card) => favCard._id !== cardId);\n    return axios.patch(`${api}/${res.data[0]._id}`, {\n      favCards: res.data[0].favCards,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import axios from \"axios\";\nlet api = `${process.env.REACT_APP_API}/favorites`;\nexport function getFav(userId) {\n  return axios.get(`${api}/search`, {\n    headers: {\n      Authorization: JSON.parse(sessionStorage.getItem(\"token\")).token\n    },\n    data: {\n      userId: userId\n    }\n  });\n}\n\n// add to fav / update fav\n// export async function addToFav(userId: string, cardId: string) {\n//   try {\n//     let res = await getFav(userId);\n//     if (res.data.length === 0) {\n//       await createFav(userId);\n//       res = await getFav(userId);\n//     }\n\n//     const cardInFav = res.data[0].favCards.some((card: Card) => card._id === cardId);\n//     if (!cardInFav) {\n//       res.data[0].favCards.push(cardId);\n\n//       successMsg(\"Card added to favorites.\");\n//       return await axios.patch(`${api}/${res.data[0]._id}`, {\n//         favCards: res.data[0].favCards,\n//       });\n//     } else {\n//       successMsg(\"Card is already in favorites.\");\n//     }\n//   } catch (error) {\n//     console.log(error);\n//   }\n// }\nexport async function addToFav(cardToAdd) {\n  try {\n    return await axios.post(api, cardToAdd, {\n      headers: {\n        Authorization: JSON.parse(sessionStorage.getItem(\"token\")).token\n      }\n    });\n  } catch (error) {\n    throw error;\n  }\n}\nexport function checkFavCard(favToCheck, _id) {\n  return axios.get(`${api}/${_id}`);\n}\nexport async function removeFromFav(userId, cardId) {\n  try {\n    let res = await getFav(userId);\n    res.data[0].favCards = res.data[0].favCards.filter(favCard => favCard._id !== cardId);\n    return axios.patch(`${api}/${res.data[0]._id}`, {\n      favCards: res.data[0].favCards\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}","map":{"version":3,"names":["axios","api","process","env","REACT_APP_API","getFav","userId","get","headers","Authorization","JSON","parse","sessionStorage","getItem","token","data","addToFav","cardToAdd","post","error","checkFavCard","favToCheck","_id","removeFromFav","cardId","res","favCards","filter","favCard","patch","console","log"],"sources":["/Users/lironds/Documents/FullStack/HackerU/react/sniffle-client/src/services/favServices.ts"],"sourcesContent":["import axios from \"axios\";\nimport Card from \"../interfaces/Card\";\nimport Favorite from \"../interfaces/Favorite\";\nimport { successMsg } from \"./feedbacksServices\";\n\nlet api: string = `${process.env.REACT_APP_API}/favorites`;\n\nexport function getFav(userId: string) {\n  return axios.get(`${api}/search`, {\n    headers: {\n      Authorization: JSON.parse(sessionStorage.getItem(\"token\") as string).token,\n    },\n    data: {\n      userId: userId,\n    },\n  });\n}\n\n// add to fav / update fav\n// export async function addToFav(userId: string, cardId: string) {\n//   try {\n//     let res = await getFav(userId);\n//     if (res.data.length === 0) {\n//       await createFav(userId);\n//       res = await getFav(userId);\n//     }\n\n//     const cardInFav = res.data[0].favCards.some((card: Card) => card._id === cardId);\n//     if (!cardInFav) {\n//       res.data[0].favCards.push(cardId);\n\n//       successMsg(\"Card added to favorites.\");\n//       return await axios.patch(`${api}/${res.data[0]._id}`, {\n//         favCards: res.data[0].favCards,\n//       });\n//     } else {\n//       successMsg(\"Card is already in favorites.\");\n//     }\n//   } catch (error) {\n//     console.log(error);\n//   }\n// }\nexport async function addToFav(cardToAdd: Card) {\n  try {\n    return await axios.post(api, cardToAdd, {\n      headers: {\n        Authorization: JSON.parse(sessionStorage.getItem(\"token\") as string).token,\n      },\n    });\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport function checkFavCard(favToCheck: Card, _id: string) {\n  return axios.get(`${api}/${_id}`);\n}\n\nexport async function removeFromFav(userId: string, cardId: string) {\n  try {\n    let res = await getFav(userId);\n    res.data[0].favCards = res.data[0].favCards.filter((favCard: Card) => favCard._id !== cardId);\n    return axios.patch(`${api}/${res.data[0]._id}`, {\n      favCards: res.data[0].favCards,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAKzB,IAAIC,GAAW,GAAI,GAAEC,OAAO,CAACC,GAAG,CAACC,aAAc,YAAW;AAE1D,OAAO,SAASC,MAAMA,CAACC,MAAc,EAAE;EACrC,OAAON,KAAK,CAACO,GAAG,CAAE,GAAEN,GAAI,SAAQ,EAAE;IAChCO,OAAO,EAAE;MACPC,aAAa,EAAEC,IAAI,CAACC,KAAK,CAACC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAW,CAAC,CAACC;IACvE,CAAC;IACDC,IAAI,EAAE;MACJT,MAAM,EAAEA;IACV;EACF,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeU,QAAQA,CAACC,SAAe,EAAE;EAC9C,IAAI;IACF,OAAO,MAAMjB,KAAK,CAACkB,IAAI,CAACjB,GAAG,EAAEgB,SAAS,EAAE;MACtCT,OAAO,EAAE;QACPC,aAAa,EAAEC,IAAI,CAACC,KAAK,CAACC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAW,CAAC,CAACC;MACvE;IACF,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOK,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF;AAEA,OAAO,SAASC,YAAYA,CAACC,UAAgB,EAAEC,GAAW,EAAE;EAC1D,OAAOtB,KAAK,CAACO,GAAG,CAAE,GAAEN,GAAI,IAAGqB,GAAI,EAAC,CAAC;AACnC;AAEA,OAAO,eAAeC,aAAaA,CAACjB,MAAc,EAAEkB,MAAc,EAAE;EAClE,IAAI;IACF,IAAIC,GAAG,GAAG,MAAMpB,MAAM,CAACC,MAAM,CAAC;IAC9BmB,GAAG,CAACV,IAAI,CAAC,CAAC,CAAC,CAACW,QAAQ,GAAGD,GAAG,CAACV,IAAI,CAAC,CAAC,CAAC,CAACW,QAAQ,CAACC,MAAM,CAAEC,OAAa,IAAKA,OAAO,CAACN,GAAG,KAAKE,MAAM,CAAC;IAC7F,OAAOxB,KAAK,CAAC6B,KAAK,CAAE,GAAE5B,GAAI,IAAGwB,GAAG,CAACV,IAAI,CAAC,CAAC,CAAC,CAACO,GAAI,EAAC,EAAE;MAC9CI,QAAQ,EAAED,GAAG,CAACV,IAAI,CAAC,CAAC,CAAC,CAACW;IACxB,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOP,KAAK,EAAE;IACdW,OAAO,CAACC,GAAG,CAACZ,KAAK,CAAC;EACpB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}
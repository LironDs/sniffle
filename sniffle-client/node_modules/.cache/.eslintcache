[{"/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/index.tsx":"1","/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/reportWebVitals.ts":"2","/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/App.tsx":"3","/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/components/Home.tsx":"4","/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/components/CreateCard.tsx":"5","/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/components/Navbar.tsx":"6","/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/components/CardInfo.tsx":"7","/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/components/Login.tsx":"8","/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/components/Footer.tsx":"9","/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/components/UserCards.tsx":"10","/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/components/Register.tsx":"11","/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/components/UpdateCard.tsx":"12","/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/components/UserProfile.tsx":"13","/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/components/Crm.tsx":"14","/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/components/FavCards.tsx":"15","/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/components/PageNotFound404.tsx":"16","/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/components/About.tsx":"17","/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/services/usersServices.ts":"18","/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/services/favServices.ts":"19","/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/services/feedbacksServices.ts":"20","/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/services/cardsServices.ts":"21"},{"size":399,"mtime":1689068201307,"results":"22","hashOfConfig":"23"},{"size":425,"mtime":1689066212814,"results":"24","hashOfConfig":"23"},{"size":2260,"mtime":1695927405593,"results":"25","hashOfConfig":"23"},{"size":4387,"mtime":1694670416287,"results":"26","hashOfConfig":"23"},{"size":11928,"mtime":1694529187200,"results":"27","hashOfConfig":"23"},{"size":4183,"mtime":1694537545706,"results":"28","hashOfConfig":"23"},{"size":2040,"mtime":1701712878378,"results":"29","hashOfConfig":"23"},{"size":4829,"mtime":1704302768285,"results":"30","hashOfConfig":"23"},{"size":666,"mtime":1693145886931,"results":"31","hashOfConfig":"23"},{"size":3510,"mtime":1694670456178,"results":"32","hashOfConfig":"23"},{"size":13477,"mtime":1700047007015,"results":"33","hashOfConfig":"23"},{"size":12407,"mtime":1694670782596,"results":"34","hashOfConfig":"23"},{"size":13563,"mtime":1694670565300,"results":"35","hashOfConfig":"23"},{"size":2237,"mtime":1694670697725,"results":"36","hashOfConfig":"23"},{"size":2957,"mtime":1694670715462,"results":"37","hashOfConfig":"23"},{"size":847,"mtime":1693145886932,"results":"38","hashOfConfig":"23"},{"size":2959,"mtime":1693145886930,"results":"39","hashOfConfig":"23"},{"size":1406,"mtime":1694670869582,"results":"40","hashOfConfig":"23"},{"size":1241,"mtime":1694670839344,"results":"41","hashOfConfig":"23"},{"size":369,"mtime":1694670849015,"results":"42","hashOfConfig":"23"},{"size":1211,"mtime":1694670815986,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"r1a5i7",{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/index.tsx",[],[],"/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/reportWebVitals.ts",[],[],"/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/App.tsx",["116"],[],"import { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Home from \"./components/Home\";\nimport Navbar from \"./components/Navbar\";\nimport Register from \"./components/Register\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport Login from \"./components/Login\";\nimport CreateCard from \"./components/CreateCard\";\nimport UserCards from \"./components/UserCards\";\nimport Footer from \"./components/Footer\";\nimport UpdateCard from \"./components/UpdateCard\";\nimport CardInfo from \"./components/CardInfo\";\nimport UserProfile from \"./components/UserProfile\";\nimport About from \"./components/About\";\nimport Crm from \"./components/Crm\";\nimport FavCards from \"./components/FavCards\";\nimport { ToastContainer } from \"react-toastify\";\nimport PageNotFound404 from \"./components/PageNotFound404\";\n\nfunction App() {\n  let [userInfo, setUserInfo] = useState(\n    JSON.parse(sessionStorage.getItem(\"userInfo\") as string) == null\n      ? { email: false }\n      : JSON.parse(sessionStorage.getItem(\"userInfo\") as string)\n  );\n\n  return (\n    <div className=\"App\">\n      <ToastContainer />\n      <Router>\n        <Navbar setUserInfo={setUserInfo} userInfo={userInfo} />\n        <Routes>\n          <Route path=\"/\" element={<Home userInfo={userInfo} />} />\n          <Route path=\"/aboutSniffle\" element={<About />} />\n          <Route path=\"/favorites\" element={<FavCards userInfo={userInfo} />} />\n          <Route path=\"/crm\" element={<Crm />} />\n          <Route path=\"/login\" element={<Login setUserInfo={setUserInfo} userInfo={userInfo} />} />\n          <Route path=\"/register\" element={<Register setUserInfo={setUserInfo} />} />\n          <Route path=\"/cards/new\" element={<CreateCard userInfo={userInfo} />} />\n          <Route path=\"/user-cards\" element={<UserCards userInfo={userInfo} />} />\n          <Route path=\"/cards/update/:_id\" element={<UpdateCard />} />\n          <Route path=\"/cards/:_id\" element={<CardInfo />} />\n          <Route\n            path=\"users/user-profile/:_id\"\n            element={<UserProfile setUserInfo={setUserInfo} userInfo={userInfo} />}\n          />\n          <Route path=\"*\" element={<PageNotFound404 />} />\n        </Routes>\n      </Router>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/components/Home.tsx",["117"],[],"import { FunctionComponent, useEffect, useState } from \"react\";\nimport Card from \"../interfaces/Card\";\nimport { deleteCard, getCards } from \"../services/cardsServices\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { addOrRemoveCard, updateFav } from \"../services/favServices\";\nimport { successMsg } from \"../services/feedbacksServices\";\n\ninterface HomeProps {\n  userInfo: any;\n}\n\nconst Home: FunctionComponent<HomeProps> = ({ userInfo }) => {\n  let [cards, setCards] = useState<Card[]>([]);\n  let [cardsChanged, setCardsChanged] = useState<boolean>(false);\n\n  let navigate = useNavigate();\n\n  let render = () => {\n    setCardsChanged(!cardsChanged);\n  };\n  useEffect(() => {\n    getCards()\n      .then((res) => setCards(res.data))\n      .catch((err) => console.log(err));\n  }, [cardsChanged]);\n\n  let handleAddRemoveFromFav = (card: Card) => {\n    addOrRemoveCard(card)\n      .then((res) => {})\n      .catch((err) => {});\n  };\n  let handleDelete = (card: Card) => {\n    if (window.confirm(\"Are you sure you want to delete this card?\")) {\n      deleteCard(card._id as string)\n        .then((res) => {\n          successMsg(\"Card removed successfully\");\n\n          render();\n        })\n        .catch((err) => console.log(err));\n    }\n  };\n\n  return (\n    <>\n      <div className=\"container-fluid pb-5\" style={{ maxHeight: \"87vh\" }}>\n        <div className=\"container text-center my-3\">\n          <h1>Welcome to Sniffle!</h1>\n          <h3>Here you can check our best friends</h3>\n        </div>\n        {cards.length ? (\n          <div className=\"row row-cols-1 row-cols-md-3 g-4 justify-content-center \">\n            {cards.map((card: Card) => (\n              <div\n                key={card._id}\n                className=\"card mb-3 mx-2\"\n                style={{ maxWidth: \"340px\", maxHeight: \"500px\" }}\n              >\n                <div className=\" g-0 mx-auto align-content-between\">\n                  <div className=\"text-center\">\n                    <img\n                      src={card.imageUrl}\n                      className=\"rounded-start p-1 object-fit-contain \"\n                      alt={card.imageAlt}\n                      width={\"200px\"}\n                      height={\"150px\"}\n                    />\n                  </div>\n                  <div className=\"col-md-12\">\n                    <div className=\"card-body d-flex flex-column\">\n                      <h5 className=\"card-title\">{card.title}</h5>\n                      <p className=\"card-text\">{card.description}</p>\n                      <hr />\n                      <p className=\"card-text\">Phone: {card.phone}</p>\n                      <p className=\"card-text\">Email: {card.email}</p>\n                      <p className=\"card-text\">City: {card.city}</p>\n                      <div className=\"container d-flex justify-content-around\">\n                        {userInfo.role === \"admin\" && (\n                          <>\n                            <Link to=\"/\" onClick={() => handleDelete(card)}>\n                              <i className=\"bi bi-trash3-fill\" style={{ fontSize: \"22px\" }}></i>\n                            </Link>\n                            <Link to={`/cards/update/${card._id}`}>\n                              <i\n                                className=\"bi bi-pencil-square p-auto\"\n                                style={{ fontSize: \"22px\" }}\n                              ></i>\n                            </Link>\n                          </>\n                        )}\n                        {userInfo.role && (\n                          <Link to=\"\" onClick={() => handleAddRemoveFromFav(card)}>\n                            <i\n                              className=\"bi bi-heart-fill\"\n                              style={{ color: \"#df0c0c\", fontSize: \"22px\" }}\n                            />\n                          </Link>\n                        )}\n                        <i\n                          className=\"bi bi-info-circle\"\n                          style={{ fontSize: \"22px\" }}\n                          onClick={() => navigate(`/cards/${card._id}`)}\n                        ></i>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <h3>No cards to display</h3>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Home;\n","/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/components/CreateCard.tsx",[],[],"/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/components/Navbar.tsx",[],[],"/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/components/CardInfo.tsx",["118","119"],[],"import { FunctionComponent, useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport Card from \"../interfaces/Card\";\nimport { getCardById } from \"../services/cardsServices\";\n\ninterface CardInfoProps {}\n\nconst CardInfo: FunctionComponent<CardInfoProps> = () => {\n  let { _id } = useParams();\n  let navigate = useNavigate();\n\n  let [card, setCard] = useState<Card>({\n    title: \"\",\n    subTitle: \"\",\n    description: \"\",\n    phone: \"\",\n    email: \"\",\n    web: \"\",\n    imageUrl: \"\",\n    imageAlt: \"\",\n    state: \"\",\n    country: \"\",\n    city: \"\",\n    street: \"\",\n    houseNumber: \"\",\n    zip: 0,\n  });\n\n  useEffect(() => {\n    getCardById(String(_id))\n      .then((res) => {\n        setCard(res.data);\n      })\n      .catch((error) => console.log(error));\n  }, []);\n  return (\n    <>\n      <div className=\"container mt-4\">\n        <div className=\"card mb-3\" style={{ maxWidth: \"540px\" }}>\n          <div className=\"row no-gutters\">\n            <div className=\"col-md-4\">\n              <img src={card.imageUrl} className=\"card-img\" alt={card.imageAlt} />\n            </div>\n            <div className=\"col-md-8\">\n              <div className=\"card-body\">\n                <h5 className=\"card-title display-6\">\n                  <strong>{card.title}</strong>\n                </h5>\n                <h5 className=\"card-text\">{card.subTitle}</h5>\n                <p className=\"card-text\">{card.description}</p>\n                <p className=\"card-text\">Call us: {card.phone}</p>\n\n                <p className=\"card-text\">{card.email}</p>\n                <p className=\"card-text\">{card.web}</p>\n                <p className=\"card-text\">\n                  Our Address:\n                  {card.country}\n                </p>\n                <p className=\"card-text\">\n                  {card.city}, {card.street}\n                  {card.houseNumber}, {card.zip}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default CardInfo;\n","/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/components/Login.tsx",[],[],"/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/components/Footer.tsx",[],[],"/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/components/UserCards.tsx",["120"],[],"import { FunctionComponent, useEffect, useState } from \"react\";\nimport { deleteCard, getCardsByUserId } from \"../services/cardsServices\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport Card from \"../interfaces/Card\";\nimport { successMsg } from \"../services/feedbacksServices\";\n\ninterface UserCardsProps {\n  userInfo: any;\n}\n\nconst UserCards: FunctionComponent<UserCardsProps> = ({ userInfo }) => {\n  let navigate = useNavigate();\n  let [cards, setCards] = useState<Card[]>([]);\n  let [cardsChanged, setCardsChanged] = useState<boolean>(false);\n\n  let render = () => {\n    setCardsChanged(!cardsChanged);\n  };\n  useEffect(() => {\n    getCardsByUserId(userInfo._id)\n      .then((res) => setCards(res.data))\n      .catch((err) => console.log(err));\n  }, [cardsChanged]);\n  let handleDelete = (card: Card) => {\n    deleteCard(card._id as string)\n      .then((res) => {\n        successMsg(\"Card deleted successfully!\");\n        render();\n      })\n      .catch((err) => console.log(err));\n  };\n\n  return (\n    <>\n      <div className=\"container\">\n        {cards.length ? (\n          <div className=\"row row-cols-1 row-cols-md-3 g-4\">\n            {cards.map((card: Card) => (\n              <div\n                key={card._id}\n                className=\"card mb-3 mx-2\"\n                style={{ maxWidth: \"340px\", maxHeight: \"500px\" }}\n              >\n                <div className=\" g-0 mx-auto align-content-between\">\n                  <div className=\"text-center\">\n                    <img\n                      src={card.imageUrl}\n                      className=\"rounded-start p-1 object-fit-contain \"\n                      alt={card.imageAlt}\n                      width={\"200px\"}\n                      height={\"150px\"}\n                    />\n                  </div>\n                  <div className=\"col-md-12\">\n                    <div className=\"card-body d-flex flex-column\">\n                      <h5 className=\"card-title\">{card.title}</h5>\n                      <p className=\"card-text\">{card.description}</p>\n                      <hr />\n                      <p className=\"card-text\">Phone: {card.phone}</p>\n                      <p className=\"card-text\">Email: {card.email}</p>\n                      <p className=\"card-text\">City: {card.city}</p>\n                      <div className=\"container d-flex justify-content-around\">\n                        <Link to=\"/\" onClick={() => handleDelete(card)}>\n                          <i className=\"bi bi-trash3-fill\" style={{ fontSize: \"22px\" }}></i>\n                        </Link>\n                        <Link to={`/cards/update/${card._id}`}>\n                          <i\n                            className=\"bi bi-pencil-square p-auto\"\n                            style={{ fontSize: \"22px\" }}\n                          ></i>\n                        </Link>\n\n                        <i\n                          className=\"bi bi-info-circle\"\n                          style={{ fontSize: \"22px\" }}\n                          onClick={() => navigate(`/cards/${card._id}`)}\n                        ></i>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <h3>It seems like you have not created cards yet</h3>\n        )}\n        <button type=\"button\" className=\"btn btn-primary\" onClick={() => navigate(\"/cards/new\")}>\n          Add card\n        </button>\n      </div>\n    </>\n  );\n};\n\nexport default UserCards;\n","/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/components/Register.tsx",["121","122"],[],"import { FunctionComponent, useEffect } from \"react\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { addUser, getTokenDetails } from \"../services/usersServices\";\nimport { useNavigate } from \"react-router-dom\";\nimport { successMsg } from \"../services/feedbacksServices\";\nimport jwtDecode from \"jwt-decode\";\n\ninterface RegisterProps {\n  setUserInfo: Function;\n}\n\nconst Register: FunctionComponent<RegisterProps> = ({ setUserInfo }) => {\n  let navigate = useNavigate();\n  let formik = useFormik({\n    initialValues: {\n      firstName: \"\",\n      middleName: \"\",\n      lastName: \"\",\n      phone: \"\",\n      email: \"\",\n      password: \"\",\n      imageUrl: \"\",\n      imageAlt: \"\",\n      state: \"\",\n      country: \"\",\n      city: \"\",\n      street: \"\",\n      houseNumber: \"\",\n      zip: 0,\n      role: \"user\",\n    },\n    validationSchema: yup.object({\n      firstName: yup.string().min(2, \"Please enter a valid name\").required(),\n      middleName: yup.string().min(2),\n      lastName: yup.string().min(2, \"Please enter a valid name\").required(),\n      phone: yup.string().min(8, \"Please enter a valid Phone number\").required(),\n      email: yup.string().email().required(),\n      password: yup\n        .string()\n        .matches(\n          /^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d.*\\d.*\\d.*\\d)(?=.*[!@#$%^&*-_]).{8,}$/,\n          \"Password must contain at least 8 characters, one uppercase letter, one lowercase letter, at least 4 numbers, and one special character\"\n        )\n        .required(),\n      imageUrl: yup.string().min(2).required(),\n      imageAlt: yup.string().min(2).required(),\n      state: yup.string(),\n      country: yup.string().min(2).required(),\n      city: yup.string().min(2).required(),\n      street: yup.string().min(2).required(),\n      houseNumber: yup.string().min(1, \"Please enter a valid House number\").required(),\n      zip: yup.number(),\n    }),\n    onSubmit(values) {\n      addUser(values)\n        .then((res) => {\n          navigate(\"/\");\n          successMsg(`You have registered successfully and logged in as ${values.email}`);\n          sessionStorage.setItem(\n            \"token\",\n            JSON.stringify({\n              token: res.data,\n            })\n          );\n          sessionStorage.setItem(\n            \"userInfo\",\n            JSON.stringify({\n              email: (getTokenDetails() as any).email,\n              role: (getTokenDetails() as any).role,\n              _id: (getTokenDetails() as any)._id,\n            })\n          );\n          setUserInfo(JSON.parse(sessionStorage.getItem(\"userInfo\") as string));\n        })\n        .catch((err) => console.log(err));\n    },\n  });\n  return (\n    <>\n      <div id=\"signInDiv\"></div>\n\n      <div className=\"container-fluid col-md-9 p-5\">\n        {/***** form *******/}\n        <form\n          className=\"text-center p-2 border border-info border-5 rounded-3\"\n          onSubmit={formik.handleSubmit}\n        >\n          <h3 className=\"display-3 bg-info\">Register</h3>\n          <div className=\"row\">\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"firstName\"\n                placeholder=\"Your first name\"\n                name=\"firstName\"\n                value={formik.values.firstName}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"firstName\">First Name</label>\n              {formik.touched.firstName && formik.errors.firstName && (\n                <small className=\"text-danger\">{formik.errors.firstName}</small>\n              )}\n            </div>\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"middleName\"\n                placeholder=\"Your middle name\"\n                name=\"middleName\"\n                value={formik.values.middleName}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"middleName\">Middle Name</label>\n              {formik.touched.middleName && formik.errors.middleName && (\n                <small className=\"text-danger\">{formik.errors.middleName}</small>\n              )}\n            </div>\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"lastName\"\n                placeholder=\"Your lastName name\"\n                name=\"lastName\"\n                value={formik.values.lastName}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"lastName\">lastName</label>\n              {formik.touched.lastName && formik.errors.lastName && (\n                <small className=\"text-danger\">{formik.errors.lastName}</small>\n              )}\n            </div>\n            <div className=\"row\"></div>\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"phone\"\n                placeholder=\"phone\"\n                name=\"phone\"\n                value={formik.values.phone}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"lastName\">phone</label>\n              {formik.touched.phone && formik.errors.phone && (\n                <small className=\"text-danger\">{formik.errors.phone}</small>\n              )}\n            </div>\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"email\"\n                className=\"form-control\"\n                id=\"floatingInput\"\n                placeholder=\"name@example.com\"\n                name=\"email\"\n                value={formik.values.email}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"floatingInput\">Email address</label>\n              {formik.touched.email && formik.errors.email && (\n                <small className=\"text-danger\">{formik.errors.email}</small>\n              )}\n            </div>\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"password\"\n                className=\"form-control\"\n                id=\"password\"\n                placeholder=\"password\"\n                name=\"password\"\n                value={formik.values.password}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"password\">password</label>\n              {formik.touched.password && formik.errors.password && (\n                <small className=\"text-danger\">{formik.errors.password}</small>\n              )}\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"imageUrl\"\n                placeholder=\"imageUrl\"\n                name=\"imageUrl\"\n                value={formik.values.imageUrl}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"imageUrl\">image Url</label>\n              {formik.touched.imageUrl && formik.errors.imageUrl && (\n                <small className=\"text-danger\">{formik.errors.imageUrl}</small>\n              )}\n            </div>\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"imageAlt\"\n                placeholder=\"imageAlt\"\n                name=\"imageAlt\"\n                value={formik.values.imageAlt}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"imageAlt\">image Alt</label>\n              {formik.touched.imageAlt && formik.errors.imageAlt && (\n                <small className=\"text-danger\">{formik.errors.imageAlt}</small>\n              )}\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"state\"\n                placeholder=\"state\"\n                name=\"state\"\n                value={formik.values.state}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"state\">state</label>\n              {formik.touched.state && formik.errors.state && (\n                <small className=\"text-danger\">{formik.errors.state}</small>\n              )}\n            </div>\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"country\"\n                placeholder=\"country\"\n                name=\"country\"\n                value={formik.values.country}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"country\">country</label>\n              {formik.touched.country && formik.errors.country && (\n                <small className=\"text-danger\">{formik.errors.country}</small>\n              )}\n            </div>\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"city\"\n                placeholder=\"City\"\n                name=\"city\"\n                value={formik.values.city}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"city\">City</label>\n              {formik.touched.city && formik.errors.city && (\n                <small className=\"text-danger\">{formik.errors.city}</small>\n              )}\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"street\"\n                placeholder=\"street\"\n                name=\"street\"\n                value={formik.values.street}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"street\">street</label>\n              {formik.touched.street && formik.errors.street && (\n                <small className=\"text-danger\">{formik.errors.street}</small>\n              )}\n            </div>\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"string\"\n                className=\"form-control\"\n                id=\"houseNumber\"\n                placeholder=\"houseNumber\"\n                name=\"houseNumber\"\n                value={formik.values.houseNumber}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"houseNumber\">house Number</label>\n              {formik.touched.houseNumber && formik.errors.houseNumber && (\n                <small className=\"text-danger\">{formik.errors.houseNumber}</small>\n              )}\n            </div>\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"number\"\n                className=\"form-control\"\n                id=\"zip\"\n                placeholder=\"zip\"\n                name=\"zip\"\n                value={formik.values.zip}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"zip\">Zip</label>\n              {formik.touched.zip && formik.errors.zip && (\n                <small className=\"text-danger\">{formik.errors.zip}</small>\n              )}\n            </div>\n          </div>\n          <div className=\"custom-control custom-checkbox \">\n            <input\n              type=\"checkbox\"\n              className=\"custom-control-input\"\n              id=\"role\"\n              name=\"role\"\n              value={formik.values.role}\n              checked={formik.values.role === \"business\"}\n              onChange={(e) => {\n                formik.setFieldValue(\"role\", e.target.checked ? \"business\" : \"user\");\n              }}\n            />\n            <label className=\"custom-control-label\" htmlFor=\"defaultRegisterFormNewsletter\">\n              Are you a business client?\n            </label>\n          </div>\n          <div className=\"row px-2\">\n            <button\n              type=\"reset\"\n              className=\"btn btn-success col me-1\"\n              onClick={() => formik.resetForm()}\n            >\n              RESET FORM\n            </button>\n            <button type=\"button\" className=\"btn btn-danger col\" onClick={() => navigate(-1)}>\n              CANCEL\n            </button>\n          </div>\n          <div className=\"row p-2\">\n            <button\n              type=\"submit\"\n              className=\"btn btn-primary\"\n              disabled={!formik.isValid || !formik.dirty}\n            >\n              SUBMIT\n            </button>\n          </div>\n        </form>\n      </div>\n    </>\n  );\n};\n\nexport default Register;\n","/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/components/UpdateCard.tsx",["123"],[],"import { FunctionComponent, useEffect, useState } from \"react\";\nimport { useFormik } from \"formik\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { getCardById, updateCard } from \"../services/cardsServices\";\nimport * as yup from \"yup\";\nimport Card from \"../interfaces/Card\";\nimport { successMsg } from \"../services/feedbacksServices\";\n\ninterface UpdateCardProps {}\n\nconst UpdateCard: FunctionComponent<UpdateCardProps> = () => {\n  let { _id } = useParams();\n  let navigate = useNavigate();\n\n  let [card, setCard] = useState<Card>({\n    title: \"\",\n    subTitle: \"\",\n    description: \"\",\n    phone: \"\",\n    email: \"\",\n    web: \"\",\n    imageUrl: \"\",\n    imageAlt: \"\",\n    state: \"\",\n    country: \"\",\n    city: \"\",\n    street: \"\",\n    houseNumber: \"\",\n    zip: 0,\n  });\n\n  useEffect(() => {\n    getCardById(String(_id))\n      .then((res) => {\n        setCard(res.data);\n      })\n      .catch((error) => console.log(error));\n  }, []);\n\n  let formik = useFormik({\n    initialValues: {\n      userId: card.userId,\n      title: card.title,\n      subTitle: card.subTitle,\n      description: card.description,\n      phone: card.phone,\n      email: card.email,\n      web: card.web,\n      imageUrl: card.imageUrl,\n      imageAlt: card.imageAlt,\n      state: card.state,\n      country: card.country,\n      city: card.city,\n      street: card.street,\n      houseNumber: card.houseNumber,\n      zip: card.zip,\n    },\n    enableReinitialize: true,\n\n    validationSchema: yup.object({\n      title: yup.string().required().min(2, \"Please enter a valid title\"),\n      subTitle: yup.string().required().min(2),\n      description: yup.string().min(2, \"Please enter a valid name\"),\n      phone: yup.string().min(6, \"Please enter a valid Phone number\"),\n      email: yup.string().email(),\n      web: yup.string().url(),\n      imageUrl: yup.string().url(),\n      imageAlt: yup.string().min(2),\n      state: yup.string(),\n      country: yup.string(),\n      city: yup.string(),\n      street: yup.string(),\n      houseNumber: yup.string(),\n      zip: yup.number(),\n    }),\n    onSubmit: (values) => {\n      updateCard(values, String(_id))\n        .then((res) => {\n          navigate(-1);\n          successMsg(\"Card updated successfully!\");\n        })\n        .catch((error) => console.log(error));\n    },\n  });\n\n  return (\n    <>\n      <div className=\"container-fluid col-md-9 p-5\">\n        {/***** form *******/}\n        <form\n          className=\"text-center p-2 border border-info border-5 rounded-3\"\n          onSubmit={formik.handleSubmit}\n        >\n          <h3 className=\"display-3 bg-info\">Update card</h3>\n          <div className=\"row\">\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"firstName\"\n                placeholder=\"Title\"\n                name=\"title\"\n                value={formik.values.title}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"firstName\">Title</label>\n              {formik.touched.title && formik.errors.title && (\n                <small className=\"text-danger\">{formik.errors.title}</small>\n              )}\n            </div>\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"subTitle\"\n                placeholder=\"subTitle\"\n                name=\"subTitle\"\n                value={formik.values.subTitle}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"subTitle\">subTitle</label>\n              {formik.touched.subTitle && formik.errors.subTitle && (\n                <small className=\"text-danger\">{formik.errors.subTitle}</small>\n              )}\n            </div>\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"description\"\n                placeholder=\"Your description name\"\n                name=\"description\"\n                value={formik.values.description}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"description\">description</label>\n              {formik.touched.description && formik.errors.description && (\n                <small className=\"text-danger\">{formik.errors.description}</small>\n              )}\n            </div>\n            <div className=\"row\"></div>\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"phone\"\n                placeholder=\"phone\"\n                name=\"phone\"\n                value={formik.values.phone}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"description\">phone</label>\n              {formik.touched.phone && formik.errors.phone && (\n                <small className=\"text-danger\">{formik.errors.phone}</small>\n              )}\n            </div>\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"email\"\n                className=\"form-control\"\n                id=\"floatingInput\"\n                placeholder=\"name@example.com\"\n                name=\"email\"\n                value={formik.values.email}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"floatingInput\">Email address</label>\n              {formik.touched.email && formik.errors.email && (\n                <small className=\"text-danger\">{formik.errors.email}</small>\n              )}\n            </div>\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"web\"\n                className=\"form-control\"\n                id=\"web\"\n                placeholder=\"web\"\n                name=\"web\"\n                value={formik.values.web}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"web\">web</label>\n              {formik.touched.web && formik.errors.web && (\n                <small className=\"text-danger\">{formik.errors.web}</small>\n              )}\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"imageUrl\"\n                placeholder=\"imageUrl\"\n                name=\"imageUrl\"\n                value={formik.values.imageUrl}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"imageUrl\">image Url</label>\n              {formik.touched.imageUrl && formik.errors.imageUrl && (\n                <small className=\"text-danger\">{formik.errors.imageUrl}</small>\n              )}\n            </div>\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"imageAlt\"\n                placeholder=\"imageAlt\"\n                name=\"imageAlt\"\n                value={formik.values.imageAlt}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"imageAlt\">image Alt</label>\n              {formik.touched.imageAlt && formik.errors.imageAlt && (\n                <small className=\"text-danger\">{formik.errors.imageAlt}</small>\n              )}\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"state\"\n                placeholder=\"state\"\n                name=\"state\"\n                value={formik.values.state}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"state\">state</label>\n              {formik.touched.state && formik.errors.state && (\n                <small className=\"text-danger\">{formik.errors.state}</small>\n              )}\n            </div>\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"country\"\n                placeholder=\"country\"\n                name=\"country\"\n                value={formik.values.country}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"country\">country</label>\n              {formik.touched.country && formik.errors.country && (\n                <small className=\"text-danger\">{formik.errors.country}</small>\n              )}\n            </div>\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"city\"\n                placeholder=\"City\"\n                name=\"city\"\n                value={formik.values.city}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"city\">City</label>\n              {formik.touched.city && formik.errors.city && (\n                <small className=\"text-danger\">{formik.errors.city}</small>\n              )}\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"street\"\n                placeholder=\"street\"\n                name=\"street\"\n                value={formik.values.street}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"street\">street</label>\n              {formik.touched.street && formik.errors.street && (\n                <small className=\"text-danger\">{formik.errors.street}</small>\n              )}\n            </div>\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"string\"\n                className=\"form-control\"\n                id=\"houseNumber\"\n                placeholder=\"houseNumber\"\n                name=\"houseNumber\"\n                value={formik.values.houseNumber}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"houseNumber\">house Number</label>\n              {formik.touched.houseNumber && formik.errors.houseNumber && (\n                <small className=\"text-danger\">{formik.errors.houseNumber}</small>\n              )}\n            </div>\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"zip\"\n                placeholder=\"zip\"\n                name=\"zip\"\n                value={formik.values.zip}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"zip\">Zip</label>\n              {formik.touched.zip && formik.errors.zip && (\n                <small className=\"text-danger\">{formik.errors.zip}</small>\n              )}\n            </div>\n          </div>\n\n          <div className=\"row px-2\">\n            <button\n              type=\"reset\"\n              className=\"btn btn-success col me-1\"\n              onClick={() => formik.resetForm()}\n            >\n              RESET FORM\n            </button>\n            <button type=\"button\" className=\"btn btn-danger col\" onClick={() => navigate(-1)}>\n              CANCEL\n            </button>\n          </div>\n          <div className=\"row p-2\">\n            <button\n              type=\"submit\"\n              className=\"btn btn-primary\"\n              disabled={!formik.isValid || !formik.dirty}\n            >\n              UPDATE\n            </button>\n          </div>\n        </form>\n      </div>\n    </>\n  );\n};\n\nexport default UpdateCard;\n","/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/components/UserProfile.tsx",["124","125"],[],"import { useFormik } from \"formik\";\nimport { FunctionComponent, useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport * as yup from \"yup\";\nimport { getUserById, updateUser } from \"../services/usersServices\";\nimport User from \"../interfaces/User\";\nimport { successMsg } from \"../services/feedbacksServices\";\n\ninterface UserProfileProps {\n  userInfo: any;\n  setUserInfo: Function;\n}\n\nconst UserProfile: FunctionComponent<UserProfileProps> = ({ userInfo, setUserInfo }) => {\n  const navigate = useNavigate();\n  const { _id } = useParams();\n\n  let [user, setUser] = useState<User>({\n    firstName: \"\",\n    middleName: \"\",\n    lastName: \"\",\n    phone: \"\",\n    email: \"\",\n    password: \"\",\n    imageUrl: \"\",\n    imageAlt: \"\",\n    state: \"\",\n    country: \"\",\n    city: \"\",\n    street: \"\",\n    houseNumber: \"\",\n    zip: 0,\n    role: \"\",\n  });\n\n  useEffect(() => {\n    getUserById(String(_id))\n      .then((res) => {\n        setUser(res.data);\n      })\n      .catch((err) => console.log(err));\n  }, []);\n\n  let formik = useFormik({\n    initialValues: {\n      firstName: user.firstName,\n      middleName: user.middleName,\n      lastName: user.lastName,\n      phone: user.phone,\n      email: user.email,\n      password: user.password,\n      imageUrl: user.imageUrl,\n      imageAlt: user.imageAlt,\n      state: user.state,\n      country: user.country,\n      city: user.city,\n      street: user.street,\n      houseNumber: user.houseNumber,\n      zip: user.zip,\n      role: user.role,\n    },\n    enableReinitialize: true,\n\n    validationSchema: yup.object({\n      firstName: yup.string().min(2, \"Please enter a valid name\"),\n      middleName: yup.string().min(2),\n      lastName: yup.string().min(2, \"Please enter a valid name\"),\n      phone: yup.string().min(6, \"Please enter a valid Phone number\"),\n      email: yup.string().email(),\n      password: yup\n        .string()\n        .matches(\n          /^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d.*\\d.*\\d.*\\d)(?=.*[!@#$%^&*-_]).{8,}$/,\n          \"Password must contain at least 8 characters, one uppercase letter, one lowercase letter, at least 4 numbers, and one special character\"\n        )\n        .required(),\n      imageUrl: yup.string().url(),\n      imageAlt: yup.string().min(2),\n      state: yup.string(),\n      country: yup.string(),\n      city: yup.string(),\n      street: yup.string(),\n      houseNumber: yup.string(),\n      zip: yup.number(),\n      role: yup.string(),\n    }),\n    onSubmit: (values) => {\n      updateUser(String(_id), values)\n        .then((res) => {\n          {\n            navigate(\"/\");\n            successMsg(\"User updated successfully!\");\n          }\n        })\n        .catch((err) => console.log(err));\n    },\n  });\n  return (\n    <>\n      <div className=\"container-fluid col-md-9 p-5\">\n        {/***** form *******/}\n        <form\n          className=\"text-center p-2 border border-info border-5 rounded-3\"\n          onSubmit={formik.handleSubmit}\n        >\n          <h3 className=\"display-3 bg-info\">Here you can update user profile</h3>\n          <div className=\"row\">\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"firstName\"\n                placeholder=\"Your first name\"\n                name=\"firstName\"\n                value={formik.values.firstName}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"firstName\">First Name</label>\n              {formik.touched.firstName && formik.errors.firstName && (\n                <small className=\"text-danger\">{formik.errors.firstName}</small>\n              )}\n            </div>\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"middleName\"\n                placeholder=\"Your middle name\"\n                name=\"middleName\"\n                value={formik.values.middleName}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"middleName\">Middle Name</label>\n              {formik.touched.middleName && formik.errors.middleName && (\n                <small className=\"text-danger\">{formik.errors.middleName}</small>\n              )}\n            </div>\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"lastName\"\n                placeholder=\"Your lastName name\"\n                name=\"lastName\"\n                value={formik.values.lastName}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"lastName\">lastName</label>\n              {formik.touched.lastName && formik.errors.lastName && (\n                <small className=\"text-danger\">{formik.errors.lastName}</small>\n              )}\n            </div>\n            <div className=\"row\"></div>\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"phone\"\n                placeholder=\"phone\"\n                name=\"phone\"\n                value={formik.values.phone}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"lastName\">phone</label>\n              {formik.touched.phone && formik.errors.phone && (\n                <small className=\"text-danger\">{formik.errors.phone}</small>\n              )}\n            </div>\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"email\"\n                className=\"form-control\"\n                id=\"floatingInput\"\n                placeholder=\"name@example.com\"\n                name=\"email\"\n                value={formik.values.email}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"floatingInput\">Email address</label>\n              {formik.touched.email && formik.errors.email && (\n                <small className=\"text-danger\">{formik.errors.email}</small>\n              )}\n            </div>\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"password\"\n                className=\"form-control\"\n                id=\"password\"\n                placeholder=\"password\"\n                name=\"password\"\n                value={formik.values.password}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"password\">password</label>\n              {formik.touched.password && formik.errors.password && (\n                <small className=\"text-danger\">{formik.errors.password}</small>\n              )}\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"imageUrl\"\n                placeholder=\"imageUrl\"\n                name=\"imageUrl\"\n                value={formik.values.imageUrl}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"imageUrl\">image Url</label>\n              {formik.touched.imageUrl && formik.errors.imageUrl && (\n                <small className=\"text-danger\">{formik.errors.imageUrl}</small>\n              )}\n            </div>\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"imageAlt\"\n                placeholder=\"imageAlt\"\n                name=\"imageAlt\"\n                value={formik.values.imageAlt}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"imageAlt\">image Alt</label>\n              {formik.touched.imageAlt && formik.errors.imageAlt && (\n                <small className=\"text-danger\">{formik.errors.imageAlt}</small>\n              )}\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"state\"\n                placeholder=\"state\"\n                name=\"state\"\n                value={formik.values.state}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"state\">state</label>\n              {formik.touched.state && formik.errors.state && (\n                <small className=\"text-danger\">{formik.errors.state}</small>\n              )}\n            </div>\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"country\"\n                placeholder=\"country\"\n                name=\"country\"\n                value={formik.values.country}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"country\">country</label>\n              {formik.touched.country && formik.errors.country && (\n                <small className=\"text-danger\">{formik.errors.country}</small>\n              )}\n            </div>\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"city\"\n                placeholder=\"City\"\n                name=\"city\"\n                value={formik.values.city}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"city\">City</label>\n              {formik.touched.city && formik.errors.city && (\n                <small className=\"text-danger\">{formik.errors.city}</small>\n              )}\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"street\"\n                placeholder=\"street\"\n                name=\"street\"\n                value={formik.values.street}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"street\">street</label>\n              {formik.touched.street && formik.errors.street && (\n                <small className=\"text-danger\">{formik.errors.street}</small>\n              )}\n            </div>\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"string\"\n                className=\"form-control\"\n                id=\"houseNumber\"\n                placeholder=\"houseNumber\"\n                name=\"houseNumber\"\n                value={formik.values.houseNumber}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"houseNumber\">house Number</label>\n              {formik.touched.houseNumber && formik.errors.houseNumber && (\n                <small className=\"text-danger\">{formik.errors.houseNumber}</small>\n              )}\n            </div>\n            <div className=\"form-floating mb-3 col\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"zip\"\n                placeholder=\"zip\"\n                name=\"zip\"\n                value={formik.values.zip}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n              />\n              <label htmlFor=\"zip\">Zip</label>\n              {formik.touched.zip && formik.errors.zip && (\n                <small className=\"text-danger\">{formik.errors.zip}</small>\n              )}\n            </div>\n          </div>\n          <div className=\"custom-control custom-checkbox \">\n            <input\n              type=\"checkbox\"\n              className=\"custom-control-input\"\n              id=\"role\"\n              name=\"role\"\n              value={formik.values.role}\n              checked={formik.values.role === \"business\"}\n              onChange={(e) => {\n                formik.setFieldValue(\"role\", e.target.checked ? \"business\" : \"user\");\n              }}\n            />\n            <label className=\"custom-control-label\" htmlFor=\"defaultRegisterFormNewsletter\">\n              Are you a business client?\n            </label>\n          </div>\n          <div className=\"row px-2\">\n            <button\n              type=\"reset\"\n              className=\"btn btn-success col me-1\"\n              onClick={() => formik.resetForm()}\n            >\n              RESET FORM\n            </button>\n            <button type=\"button\" className=\"btn btn-danger col\" onClick={() => navigate(-1)}>\n              CANCEL\n            </button>\n          </div>\n          <div className=\"row p-2\">\n            <button\n              type=\"submit\"\n              className=\"btn btn-primary\"\n              disabled={!formik.isValid || !formik.dirty}\n            >\n              Update profile\n            </button>\n          </div>\n        </form>\n      </div>\n    </>\n  );\n};\n\nexport default UserProfile;\n","/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/components/Crm.tsx",[],[],"/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/components/FavCards.tsx",["126","127","128"],[],"import { FunctionComponent, useEffect, useState } from \"react\";\nimport Card from \"../interfaces/Card\";\nimport { addOrRemoveCard, getFav, updateFav } from \"../services/favServices\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\ninterface FavCardsProps {\n  userInfo: any;\n}\n\nconst FavCards: FunctionComponent<FavCardsProps> = ({ userInfo }) => {\n  let navigate = useNavigate();\n\n  let [favCards, setFavCards] = useState<Card[]>([]);\n  let [favCardsChanged, setFavCardsChanged] = useState<boolean>(false);\n\n  useEffect(() => {\n    getFav(userInfo._id)\n      .then((res) => {\n        setFavCards(res.data);\n      })\n      .catch((err) => console.log(err));\n  }, [favCardsChanged]);\n\n  const handleDeleteFromFav = (card: Card) => {\n    if (window.confirm(\"Are you sure you want to remove this card from favorites?\")) {\n      addOrRemoveCard(card)\n        .then((res) => {\n          setFavCardsChanged(!favCardsChanged);\n        })\n        .catch((err) => console.log(err));\n    }\n  };\n\n  return (\n    <>\n      <div className=\"container\">\n        {favCards && favCards.length ? (\n          <div className=\"row row-cols-1 row-cols-md-3 g-4 justify-content-center \">\n            {favCards.map((card: Card) => (\n              <div\n                key={card._id}\n                className=\"card mb-3 mx-2\"\n                style={{ maxWidth: \"340px\", maxHeight: \"500px\" }}\n              >\n                <div className=\" g-0 mx-auto align-content-between\">\n                  <div className=\"text-center\">\n                    <img\n                      src={card.imageUrl}\n                      className=\"rounded-start p-1 object-fit-contain \"\n                      alt={card.imageAlt}\n                      width={\"200px\"}\n                      height={\"150px\"}\n                    />\n                  </div>\n                  <div className=\"col-md-12\">\n                    <div className=\"card-body d-flex flex-column\">\n                      <h5 className=\"card-title\">{card.title}</h5>\n                      <p className=\"card-text\">{card.description}</p>\n                      <hr />\n                      <p className=\"card-text\">Phone: {card.phone}</p>\n                      <p className=\"card-text\">Email: {card.email}</p>\n                      <p className=\"card-text\">City: {card.city}</p>\n                      <div className=\"container d-flex justify-content-around\">\n                        <Link to=\"\" onClick={() => handleDeleteFromFav(card)}>\n                          <i\n                            className=\"bi bi-heart-fill\"\n                            style={{ color: \"#df0c0c\", fontSize: \"22px\" }}\n                          />\n                        </Link>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <h3>No cards to display</h3>\n        )}\n      </div>\n    </>\n  );\n};\nexport default FavCards;\n","/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/components/PageNotFound404.tsx",[],[],"/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/components/About.tsx",[],[],"/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/services/usersServices.ts",[],[],"/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/services/favServices.ts",["129"],[],"import axios from \"axios\";\nimport Card from \"../interfaces/Card\";\nimport { successMsg } from \"./feedbacksServices\";\n\nlet api: string = `${process.env.REACT_APP_API}/favorites`;\n\nexport function getFav(userId: string) {\n  return axios.get(api, {\n    headers: {\n      Authorization: JSON.parse(sessionStorage.getItem(\"token\") as string).token,\n    },\n    data: {\n      userId: userId,\n    },\n  });\n}\n\nexport async function updateFav(cardToAdd: Card) {\n  try {\n    return await axios.post(api, cardToAdd, {\n      headers: {\n        Authorization: JSON.parse(sessionStorage.getItem(\"token\") as string).token,\n      },\n    });\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function addOrRemoveCard(cardToAdd: Card) {\n  try {\n    const response = await updateFav(cardToAdd);\n    const { action, message } = response.data;\n\n    if (response.status === 200 || 201) {\n      ////if added to fav\n      if (action === \"add\") {\n        successMsg(\"Card added to favorites\");\n        /////if removed from fav\n      } else if (action === \"remove\") {\n        successMsg(\"Card removed from favorites\");\n        // Show a success message or update your UI here\n      }\n    }\n  } catch (error) {\n    console.error(\"An error occurred\", error);\n  }\n}\n","/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/services/feedbacksServices.ts",[],[],"/Users/lironds/Documents/FullStack/HackerU/Projects/sniffle/sniffle-client/src/services/cardsServices.ts",[],[],{"ruleId":"130","severity":1,"message":"131","line":1,"column":20,"nodeType":"132","messageId":"133","endLine":1,"endColumn":29},{"ruleId":"130","severity":1,"message":"134","line":5,"column":27,"nodeType":"132","messageId":"133","endLine":5,"endColumn":36},{"ruleId":"130","severity":1,"message":"135","line":10,"column":7,"nodeType":"132","messageId":"133","endLine":10,"endColumn":15},{"ruleId":"136","severity":1,"message":"137","line":35,"column":6,"nodeType":"138","endLine":35,"endColumn":8,"suggestions":"139"},{"ruleId":"136","severity":1,"message":"140","line":23,"column":6,"nodeType":"138","endLine":23,"endColumn":20,"suggestions":"141"},{"ruleId":"130","severity":1,"message":"131","line":1,"column":29,"nodeType":"132","messageId":"133","endLine":1,"endColumn":38},{"ruleId":"130","severity":1,"message":"142","line":7,"column":8,"nodeType":"132","messageId":"133","endLine":7,"endColumn":17},{"ruleId":"136","severity":1,"message":"137","line":38,"column":6,"nodeType":"138","endLine":38,"endColumn":8,"suggestions":"143"},{"ruleId":"136","severity":1,"message":"137","line":42,"column":6,"nodeType":"138","endLine":42,"endColumn":8,"suggestions":"144"},{"ruleId":"145","severity":1,"message":"146","line":90,"column":11,"nodeType":"147","messageId":"148","endLine":93,"endColumn":12},{"ruleId":"130","severity":1,"message":"134","line":3,"column":35,"nodeType":"132","messageId":"133","endLine":3,"endColumn":44},{"ruleId":"130","severity":1,"message":"135","line":11,"column":7,"nodeType":"132","messageId":"133","endLine":11,"endColumn":15},{"ruleId":"136","severity":1,"message":"140","line":22,"column":6,"nodeType":"138","endLine":22,"endColumn":23,"suggestions":"149"},{"ruleId":"130","severity":1,"message":"150","line":33,"column":21,"nodeType":"132","messageId":"133","endLine":33,"endColumn":28},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'updateFav' is defined but never used.","'navigate' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: '_id'. Either include it or remove the dependency array.","ArrayExpression",["151"],"React Hook useEffect has a missing dependency: 'userInfo._id'. Either include it or remove the dependency array.",["152"],"'jwtDecode' is defined but never used.",["153"],["154"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock",["155"],"'message' is assigned a value but never used.",{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"156","fix":"160"},{"desc":"156","fix":"161"},{"desc":"162","fix":"163"},"Update the dependencies array to be: [_id]",{"range":"164","text":"165"},"Update the dependencies array to be: [cardsChanged, userInfo._id]",{"range":"166","text":"167"},{"range":"168","text":"165"},{"range":"169","text":"165"},"Update the dependencies array to be: [favCardsChanged, userInfo._id]",{"range":"170","text":"171"},[803,805],"[_id]",[765,779],"[cardsChanged, userInfo._id]",[945,947],[1038,1040],[667,684],"[favCardsChanged, userInfo._id]"]